rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isAdmin() {
      return isAuthenticated() && getUserRole() == 'admin';
    }

    function isCoach() {
      return isAuthenticated() && getUserRole() == 'coach';
    }

    function isCoachOrAdmin() {
      return isAuthenticated() && (getUserRole() == 'coach' || getUserRole() == 'admin');
    }

    function isOwner(ownerId) {
      return isAuthenticated() && request.auth.uid == ownerId;
    }

    function belongsToTeam(teamId) {
      return isAuthenticated() && teamId == 'team-1'; // Simplified for MVP
    }

    function isTeamMember(teamId) {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/teams/$(teamId)) &&
        get(/databases/$(database)/documents/teams/$(teamId)).data.members[request.auth.uid] != null;
    }

    function validPlayData() {
      return request.resource.data.name is string &&
        request.resource.data.name.size() > 0 &&
        request.resource.data.name.size() <= 100 &&
        request.resource.data.slides is list &&
        request.resource.data.slides.size() == 3 &&
        request.resource.data.teamId is string &&
        request.resource.data.createdBy is string;
    }

    // Plays collection
    match /plays/{playId} {
      // Read: Must be authenticated and belong to same team
      allow read: if isAuthenticated() && belongsToTeam(resource.data.teamId);

      // Create: Any authenticated user can create plays (for now)
      allow create: if isAuthenticated() &&
        validPlayData() &&
        request.resource.data.createdBy == request.auth.uid &&
        belongsToTeam(request.resource.data.teamId);

      // Update: Must be owner (players can edit their own plays)
      allow update: if isOwner(resource.data.createdBy) &&
        validPlayData() &&
        request.resource.data.createdBy == resource.data.createdBy &&
        request.resource.data.teamId == resource.data.teamId;

      // Delete: Must be owner (players can delete their own plays)
      allow delete: if isOwner(resource.data.createdBy);
    }

    // Users collection
    match /users/{userId} {
      // Users can read their own profile, admins can read all profiles
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());

      // Users can create their own profile
      allow create: if isAuthenticated() && request.auth.uid == userId;

      // Users can update their own profile
      // Admins can update any profile (for team assignment)
      allow update: if isAuthenticated() &&
        (request.auth.uid == userId || isAdmin());
    }

    // Schedule collection
    match /schedule/{eventId} {
      function validEventData() {
        return request.resource.data.title is string &&
          request.resource.data.title.size() > 0 &&
          request.resource.data.title.size() <= 100 &&
          request.resource.data.date is string;
      }

      // Anyone can read schedule (public events)
      allow read: if true;

      // Any authenticated user can create/modify schedule (for now)
      allow create, update: if isAuthenticated() && validEventData();

      // Any authenticated user can delete events
      allow delete: if isAuthenticated();
    }

    // Teams collection
    match /teams/{teamId} {
      // Team members and admins can read team data
      allow read: if isAuthenticated() && (isTeamMember(teamId) || isAdmin());

      // Only admins can create teams
      allow create: if isAdmin() &&
        request.resource.data.createdBy == request.auth.uid;

      // Admins and team creators can update team data
      allow update: if isAuthenticated() &&
        (isAdmin() || resource.data.createdBy == request.auth.uid);

      // Only admins can delete teams
      allow delete: if isAdmin();
    }

    // Invites collection
    match /invites/{inviteId} {
      // Users can read invites sent to their email
      // Admins and coaches can read all invites for their team
      allow read: if isAuthenticated() && (
        request.auth.token.email == resource.data.email ||
        isAdmin() ||
        (isCoach() && exists(/databases/$(database)/documents/invites/$(inviteId)))
      );

      // Admins and coaches can create invites
      allow create: if isAuthenticated() &&
        isCoachOrAdmin() &&
        request.resource.data.invitedBy == request.auth.uid;

      // Users can update invites (to accept/decline)
      // Admins and coaches can update their own invites
      allow update: if isAuthenticated() && (
        request.auth.token.email == resource.data.email ||
        resource.data.invitedBy == request.auth.uid ||
        isAdmin()
      );

      // Only the creator or admin can delete invites
      allow delete: if isAuthenticated() &&
        (resource.data.invitedBy == request.auth.uid || isAdmin());
    }
  }
}
